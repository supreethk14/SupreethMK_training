package springmvc.aop;

import org.aspectj.lang.JoinPoint;
import org.aspectj.lang.ProceedingJoinPoint;
import org.aspectj.lang.annotation.After;
import org.aspectj.lang.annotation.AfterReturning;
import org.aspectj.lang.annotation.AfterThrowing;
import org.aspectj.lang.annotation.Around;
import org.aspectj.lang.annotation.Aspect;
import org.aspectj.lang.annotation.Before;
import org.springframework.stereotype.Component;

@Aspect
@Component
public class AspectClass {

	




    // Advice that runs before a method execution
    @Before("execution(* springmvc.service.FlightService.*(..))")
    public void beforeMethod(JoinPoint joinPoint) {
        System.out.println("Before method: " + joinPoint.getSignature().getName());
    }

    // Advice that runs after a method execution, regardless of its outcome
    @After("execution(* springmvc.service.FlightService.*(..))")
    public void afterMethod(JoinPoint joinPoint) {
        System.out.println("After method: " + joinPoint.getSignature().getName());
    }

    // Advice that runs after a method returns successfully
    @AfterReturning(pointcut = "execution(* springmvc.service.FlightService.*(..))", returning = "result")
    public void afterReturningMethod(JoinPoint joinPoint, Object result) {
        System.out.println("Method " + joinPoint.getSignature().getName() + " returned with value: " + result);
    }

    // Advice that runs after a method throws an exception
    @AfterThrowing(pointcut = "execution(* springmvc.service.FlightService.*(..))", throwing = "exception")
    public void afterThrowingMethod(JoinPoint joinPoint, Throwable exception) {
        System.out.println("Method " + joinPoint.getSignature().getName() + " threw exception: " + exception);
    }

    // Advice that runs around a method execution
    @Around("execution(* springmvc.service.FlightService.*(..))")
    public Object logExecutionTime(ProceedingJoinPoint joinPoint) throws Throwable {
        long start = System.currentTimeMillis();
        Object proceed = joinPoint.proceed();
        long executionTime = System.currentTimeMillis() - start;
        System.out.println("Method " + joinPoint.getSignature().getName() + " executed in " + executionTime + "ms");
        return proceed;
    }

}
